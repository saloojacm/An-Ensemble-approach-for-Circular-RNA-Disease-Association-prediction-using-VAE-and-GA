# -*- coding: utf-8 -*-
"""Datapreprocessgithub.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wJb7v301o3kfomvJXicNmqYi5KArwfti

1. Association matrix
2.circRNA sequence similarity matrix
3.disease semantic matrix
4. GIP kernal sim matrix
5. integrated sim matrix
"""

# Association matrix
# circRNA sequence similarity matrix
$ disease semantic matrix
# GIP kernal sim matrix
# integrated sim matrix

import pandas as pd
from numpy import savetxt
!pip install leven
from leven import levenshtein
import numpy as np
from sklearn.metrics import roc_curve,average_precision_score,precision_recall_curve,precision_score, recall_score, f1_score
from sklearn.metrics import auc
from sklearn import metrics
# load data
c_d_assoc=pd.read_csv('/content/CircBase-sequence-processed.csv')
circrna=pd.read_csv('/content/circRNA.csv')
disease=pd.read_csv('/content/diseases.csv')
# Functions
def construct_circRNA_Disease_ass_matrix():
  i=0
  j=0
  assoc_matrix=np.zeros([c_d_assoc.shape[0],disease.shape[0]])
  for i in range(c_d_assoc.shape[0]):
    for j in range(disease.shape[0]):
      if(c_d_assoc.iloc[i][4] == disease.iloc[j][0]):
          assoc_matrix[i][j]=1

  savetxt('ass matrix.csv', assoc_matrix, delimiter=',')
  return assoc_matrix


def construct_circRNA_Sequence_similarity_matrix():
  i=0
  j=0
  SCseq_matrix=np.zeros([c_d_assoc.shape[0],c_d_assoc.shape[0]])
  for i in range(c_d_assoc.shape[0]):
    for j in range(c_d_assoc.shape[0]):
        Lev_dis=levenshtein(c_d_assoc.iloc[i][3],c_d_assoc.iloc[j][3])
        l_ci=len(c_d_assoc.iloc[i][3])
        l_cj=len(c_d_assoc.iloc[j][3])
        SCseq_matrix[i][j]=1-((Lev_dis)/(l_ci+l_cj))

  savetxt('SCseq matrix.csv', SCseq_matrix, delimiter=',')

def construct_disease_similarity_matrix():
  i=0
  j=0
  Dsem_matrix=np.zeros([disease.shape[0],disease.shape[0]])
  for i in range(disease.shape[0]):
    for j in range(disease.shape[0]):
        D_Wangdis=levenshtein(c_d_assoc.iloc[i][3],c_d_assoc.iloc[j][3])
        l_ci=len(c_d_assoc.iloc[i][3])
        l_cj=len(c_d_assoc.iloc[j][3])
        Dsem_matrix[i][j]=1-(l_ci+l_cj)

  savetxt('d-d-Dsem matrix.csv', Dsem_matrix, delimiter=',')


def calculate_rho(K,nc,nd):


    norm_squared_c = np.linalg.norm(K, axis=1)**2

    rho_c=1 / (1 /(nc * np.sum(norm_squared_c)))

    norm_squared_d= np.linalg.norm(K, axis=0)**2

    rho_d= 1 / (1 / (nd * np.sum(norm_squared_d)))

    return rho_c, rho_d

def calculate_C_GIP(K, nc, rho_c):
    CGIP=np.zeros([nc,nc])
    for i in range(nc):
      for j in range(nc):

          CGIP[i][j]=np.exp(-rho_c * (np.linalg.norm(np.subtract(K[i,:], K[j,:]))**2))

    return CGIP

def calculate_D_GIP(K, nd, rho_d):
    DGIP=np.zeros([nd,nd])
    for i in range(nd):
      for j in range(nd):

          DGIP[i][j]=np.exp(-rho_d * (np.linalg.norm(np.subtract(K[:,i], K[:,j]))**2))

    return DGIP


assoc_matrix=construct_circRNA_Disease_ass_matrix()
SCseq_matrix=construct_circRNA_Sequence_similarity_matrix()
Dsem_matrix=construct_circRNA_Sequence_similarity_matrix()

# Calculate rho_c ,rho_d
rho_c ,rho_d = calculate_rho(assoc_matrix,585,disease.shape[0])


# Calculate C_GIP and D_GIP
C_GIP = calculate_C_GIP(assoc_matrix, 585,rho_c)
D_GIP = calculate_D_GIP(assoc_matrix, disease.shape[0],rho_d)

print("C_GIP:", C_GIP)
print("D_GIP:", D_GIP)

def calculate_C(seq_sim_matrix, C_GIP_matrix):
    return (seq_sim_matrix + C_GIP_matrix) / 2

def calculate_D(sem_sim_matrix, D_GIP_matrix):
    return (sem_sim_matrix + D_GIP_matrix) / 2

C=calculate_C(SCseq_matrix,C_GIP)
D=calculate_D(Dsem_matrix, D_GIP)

savetxt('integrated CircRNA  Similarity.txt', C, delimiter=',')
savetxt('integrated Disease Similarity.txt', D, delimiter=',')